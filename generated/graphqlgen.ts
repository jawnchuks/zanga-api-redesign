// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  PropertyPage,
  Property,
  Image,
  PageInfo,
  PropertyPointPage,
  PropertyPoint,
  Owner,
  Location
} from "../src/types/models.d";
import { Context } from "../src/types/types.d";

export type UserType = "Agency" | "Individual" | "Unassigned";
export type CostType = "Rent" | "Sale";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface PaginationInput {
    cursor?: string | null;
  }
  export interface PropertiesInput {
    type: CostType;
    state: string;
    budget?: number | null;
    cursor?: string | null;
  }

  export interface ArgsPostedProperties {
    input?: PaginationInput | null;
  }

  export interface ArgsSharedProperties {
    input?: PaginationInput | null;
  }

  export interface ArgsProperties {
    input: PropertiesInput;
  }

  export interface ArgsProperty {
    slug: string;
  }

  export type MeResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type PostedPropertiesResolver =
    | ((
        parent: undefined,
        args: ArgsPostedProperties,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PropertyPage | Promise<PropertyPage>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPostedProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPage | Promise<PropertyPage>;
      };

  export type SharedPropertiesResolver =
    | ((
        parent: undefined,
        args: ArgsSharedProperties,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PropertyPointPage | Promise<PropertyPointPage>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSharedProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPointPage | Promise<PropertyPointPage>;
      };

  export type PropertiesResolver =
    | ((
        parent: undefined,
        args: ArgsProperties,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PropertyPage | Promise<PropertyPage>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPage | Promise<PropertyPage>;
      };

  export type PropertyResolver =
    | ((
        parent: undefined,
        args: ArgsProperty,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Property | null | Promise<Property | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property | null | Promise<Property | null>;
      };

  export type FeaturedPropertiesResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PropertyPage | Promise<PropertyPage>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPage | Promise<PropertyPage>;
      };

  export interface Type {
    me:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    postedProperties:
      | ((
          parent: undefined,
          args: ArgsPostedProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPage | Promise<PropertyPage>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPostedProperties,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PropertyPage | Promise<PropertyPage>;
        };

    sharedProperties:
      | ((
          parent: undefined,
          args: ArgsSharedProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPointPage | Promise<PropertyPointPage>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSharedProperties,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PropertyPointPage | Promise<PropertyPointPage>;
        };

    properties:
      | ((
          parent: undefined,
          args: ArgsProperties,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPage | Promise<PropertyPage>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsProperties,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PropertyPage | Promise<PropertyPage>;
        };

    property:
      | ((
          parent: undefined,
          args: ArgsProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property | null | Promise<Property | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsProperty,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Property | null | Promise<Property | null>;
        };

    featuredProperties:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPage | Promise<PropertyPage>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PropertyPage | Promise<PropertyPage>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    phone: (parent: User) => (parent.phone === undefined ? null : parent.phone),
    name: (parent: User) => parent.name
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PhoneResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TypeResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserType | Promise<UserType>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserType | Promise<UserType>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    phone:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    type:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserType | Promise<UserType>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserType | Promise<UserType>;
        };
  }
}

export namespace PropertyPageResolvers {
  export const defaultResolvers = {
    properties: (parent: PropertyPage) => parent.properties,
    pageInfo: (parent: PropertyPage) => parent.pageInfo
  };

  export type PropertiesResolver =
    | ((
        parent: PropertyPage,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Property[] | null | Promise<Property[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property[] | null | Promise<Property[] | null>;
      };

  export type PageInfoResolver =
    | ((
        parent: PropertyPage,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export interface Type {
    properties:
      | ((
          parent: PropertyPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Property[] | null | Promise<Property[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPage,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Property[] | null | Promise<Property[] | null>;
        };

    pageInfo:
      | ((
          parent: PropertyPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPage,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };
  }
}

export namespace PropertyResolvers {
  export const defaultResolvers = {
    id: (parent: Property) => parent.id,
    slug: (parent: Property) => parent.slug,
    expense: (parent: Property) => parent.expense,
    remainingExpense: (parent: Property) => parent.remainingExpense,
    visits: (parent: Property) => parent.visits,
    bounty: (parent: Property) => parent.bounty,
    title: (parent: Property) => parent.title,
    city: (parent: Property) => parent.city,
    state: (parent: Property) => parent.state,
    costType: (parent: Property) => parent.costType,
    costValue: (parent: Property) => parent.costValue,
    owner: (parent: Property) => parent.owner,
    images: (parent: Property) => parent.images,
    description: (parent: Property) => parent.description,
    featured: (parent: Property) => parent.featured
  };

  export type IdResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type BountyResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export type ExpenseResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export type RemainingExpenseResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export type TitleResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CityResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type VisitsResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type StateResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type CostValueResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type CostTypeResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CostType | Promise<CostType>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CostType | Promise<CostType>;
      };

  export type OwnerResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type ImagesResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Image[] | null | Promise<Image[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Image[] | null | Promise<Image[] | null>;
      };

  export type DescriptionResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type FeaturedResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type SlugResolver =
    | ((
        parent: Property,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    bounty:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };

    expense:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };

    remainingExpense:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };

    title:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    city:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    visits:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    state:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    costValue:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    costType:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CostType | Promise<CostType>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CostType | Promise<CostType>;
        };

    owner:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    images:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Image[] | null | Promise<Image[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Image[] | null | Promise<Image[] | null>;
        };

    description:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    featured:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    slug:
      | ((
          parent: Property,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Property,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace ImageResolvers {
  export const defaultResolvers = {
    url: (parent: Image) => parent.url,
    previewUrl: (parent: Image) => parent.previewUrl
  };

  export type UrlResolver =
    | ((
        parent: Image,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Image,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PreviewUrlResolver =
    | ((
        parent: Image,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Image,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    url:
      | ((
          parent: Image,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Image,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    previewUrl:
      | ((
          parent: Image,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Image,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {};

  export type HasNextPageResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HasPreviousPageResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    hasNextPage:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    hasPreviousPage:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace PropertyPointPageResolvers {
  export const defaultResolvers = {
    points: (parent: PropertyPointPage) => parent.points,
    pageInfo: (parent: PropertyPointPage) => parent.pageInfo
  };

  export type PointsResolver =
    | ((
        parent: PropertyPointPage,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PropertyPoint[] | null | Promise<PropertyPoint[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPointPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPoint[] | null | Promise<PropertyPoint[] | null>;
      };

  export type PageInfoResolver =
    | ((
        parent: PropertyPointPage,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPointPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export interface Type {
    points:
      | ((
          parent: PropertyPointPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PropertyPoint[] | null | Promise<PropertyPoint[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPointPage,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PropertyPoint[] | null | Promise<PropertyPoint[] | null>;
        };

    pageInfo:
      | ((
          parent: PropertyPointPage,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPointPage,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };
  }
}

export namespace PropertyPointResolvers {
  export const defaultResolvers = {
    propertySlug: (parent: PropertyPoint) => parent.propertySlug,
    propertyTitle: (parent: PropertyPoint) => parent.propertyTitle,
    impressions: (parent: PropertyPoint) => parent.impressions,
    profit: (parent: PropertyPoint) => parent.profit
  };

  export type PropertySlugResolver =
    | ((
        parent: PropertyPoint,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PropertyTitleResolver =
    | ((
        parent: PropertyPoint,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ImpressionsResolver =
    | ((
        parent: PropertyPoint,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type ProfitResolver =
    | ((
        parent: PropertyPoint,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    propertySlug:
      | ((
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPoint,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    propertyTitle:
      | ((
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPoint,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    impressions:
      | ((
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPoint,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    profit:
      | ((
          parent: PropertyPoint,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: PropertyPoint,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreatePropertyInput {
    title: string;
    location: LocationInput;
    costValue: number;
    costType: CostType;
    featured: boolean;
    images: ImageInput[];
    description: string;
  }
  export interface PropertyViewInput {
    referrerId?: string | null;
    propertyId: string;
  }
  export interface UserInput {
    type?: UserType | null;
    name?: string | null;
    phone?: string | null;
  }
  export interface BountyInput {
    propertyId: string;
    expense: number;
    bounty: number;
  }
  export interface LocationInput {
    city: string;
    state: string;
  }
  export interface ImageInput {
    url: string;
    previewUrl: string;
  }

  export interface ArgsCreateProperty {
    input: CreatePropertyInput;
  }

  export interface ArgsDeleteProperty {
    id: string;
  }

  export interface ArgsIncrementPropertyView {
    input: PropertyViewInput;
  }

  export interface ArgsUpdateUser {
    input: UserInput;
  }

  export interface ArgsAssignBounty {
    input: BountyInput;
  }

  export type CreatePropertyResolver =
    | ((
        parent: undefined,
        args: ArgsCreateProperty,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type DeletePropertyResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteProperty,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type IncrementPropertyViewResolver =
    | ((
        parent: undefined,
        args: ArgsIncrementPropertyView,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | null | Promise<boolean | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsIncrementPropertyView,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>;
      };

  export type UpdateUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type AssignBountyResolver =
    | ((
        parent: undefined,
        args: ArgsAssignBounty,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAssignBounty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    createProperty:
      | ((
          parent: undefined,
          args: ArgsCreateProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateProperty,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    deleteProperty:
      | ((
          parent: undefined,
          args: ArgsDeleteProperty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteProperty,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    incrementPropertyView:
      | ((
          parent: undefined,
          args: ArgsIncrementPropertyView,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | null | Promise<boolean | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsIncrementPropertyView,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | null | Promise<boolean | null>;
        };

    updateUser:
      | ((
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    assignBounty:
      | ((
          parent: undefined,
          args: ArgsAssignBounty,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAssignBounty,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace OwnerResolvers {
  export const defaultResolvers = {
    phone: (parent: Owner) => parent.phone,
    name: (parent: Owner) => parent.name
  };

  export type PhoneResolver =
    | ((
        parent: Owner,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Owner,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Owner,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Owner,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    phone:
      | ((
          parent: Owner,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Owner,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Owner,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Owner,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace LocationResolvers {
  export const defaultResolvers = {
    city: (parent: Location) => parent.city,
    state: (parent: Location) => parent.state
  };

  export type CityResolver =
    | ((
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type StateResolver =
    | ((
        parent: Location,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    city:
      | ((
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Location,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    state:
      | ((
          parent: Location,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Location,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  PropertyPage: PropertyPageResolvers.Type;
  Property: PropertyResolvers.Type;
  Image: ImageResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  PropertyPointPage: PropertyPointPageResolvers.Type;
  PropertyPoint: PropertyPointResolvers.Type;
  Mutation: MutationResolvers.Type;
  Owner: OwnerResolvers.Type;
  Location: LocationResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
