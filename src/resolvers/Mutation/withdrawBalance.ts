import { MutationResolvers } from '../../../generated/graphqlgen';
import { AuthenticationError } from 'apollo-server-core';
import { nanoid } from 'nanoid';
import axios from 'axios'
import generateSlug from '../../functions/generateSlug';


const resolver: MutationResolvers.WithdrawBalanceResolver = async (_, { input: { accountNo, amount, bankCode, customerName, actualAmount } }, ctx) => {
    if (!ctx.userEmail) { throw new AuthenticationError('Token not found') }

    const balance = (await ctx.client.findUserByEmail({ email: ctx.userEmail })).findUserByEmail?.balance ?? 0

    if (balance < amount) {
        throw new Error('Balance < Amount')
    }

    const newAmount = (await ctx.client.subtractUserBalance({ userId: ctx.userId, value: Math.abs(actualAmount) })).subtractUserBalance
    // if (!newAmount) {
    //     throw new Error('Could not subtract amount in database')
    // }



    const result = (await axios.post<FlutterwaveBankTransferResponse>('https://api.flutterwave.com/v3/transfers', {
        reference: generateSlug(customerName) + nanoid(5),
        amount: Math.abs(amount),
        account_bank: bankCode,
        account_number: accountNo,
        callback_url: "https://zanga-payment-hook.vercel.app/api",
        currency: "NGN",
        debit_currency: "NGN",
        narration: `NGN ${amount} TRANSFER TO ${customerName} @ ${accountNo}`
    } as FlutterwaveBankTransferParams, {
        headers: {
            Authorization: 'Bearer ' + process.env.FLUTTERWAVE_SECRET
        }
    })).data


    return {
        amount: result.data.amount,
        message: result.data.narration,
        referenceId: result.data.reference,
        success: result.status === 'success'
    }
}

// Generated by https://quicktype.io


interface FlutterwaveBankTransferParams {
    account_bank: string;
    account_number: string;
    amount: number;
    narration: string;
    currency: string;
    reference: string;
    callback_url: string;
    debit_currency: string;
}



interface FlutterwaveBankTransferResponse {
    status: string;
    message: string;
    data: Data;
}

interface Data {
    id: number;
    account_number: string;
    bank_code: string;
    full_name: string;
    created_at: string;
    currency: string;
    debit_currency: string;
    amount: number;
    fee: number;
    status: string;
    reference: string;
    meta: null;
    narration: string;
    complete_message: string;
    requires_approval: number;
    is_approved: number;
    bank_name: string;
}


export default resolver