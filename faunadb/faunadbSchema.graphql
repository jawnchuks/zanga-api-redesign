directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
enum CostType {
  Rent
  Sale
}

scalar Date

type Image {
  previewUrl: String!
  url: String!
}

# 'Image' input values
input ImageInput {
  previewUrl: String!
  url: String!
}

# The `Long` scalar type
#  represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  # Update an existing document in the collection of 'User'
  updateUser(
    # The 'User' document's ID
    id: ID!
    # 'User' input values
    data: UserInput!
  ): User
  # Create a new document in the collection of 'PropertyPoint'
  createPropertyPoint(
    # 'PropertyPoint' input values
    data: PropertyPointInput!
  ): PropertyPoint!
  # Create a new document in the collection of 'User'
  createUser(
    # 'User' input values
    data: UserInput!
  ): User!
  incrementPropertyVisit(propertyId: ID!): Property!
  incrementPropertyPoint(propertyPointId: ID!): PropertyPoint!
  # Update an existing document in the collection of 'Property'
  updateProperty(
    # The 'Property' document's ID
    id: ID!
    # 'Property' input values
    data: PropertyInput!
  ): Property
  # Delete an existing document in the collection of 'Property'
  deleteProperty(
    # The 'Property' document's ID
    id: ID!
  ): Property
  # Partially updates an existing document in the collection of 'PropertyPoint'.
  # It only modifies the values that are specified in the arguments. During
  # execution, it verifies that required fields are not set to 'null'.
  partialUpdatePropertyPoint(
    # The 'PropertyPoint' document's ID
    id: ID!
    # 'PropertyPoint' input values
    data: PartialUpdatePropertyPointInput!
  ): PropertyPoint
  addUserBalance(userId: ID!, value: Float!): Float!
  # Update an existing document in the collection of 'PropertyPoint'
  updatePropertyPoint(
    # The 'PropertyPoint' document's ID
    id: ID!
    # 'PropertyPoint' input values
    data: PropertyPointInput!
  ): PropertyPoint
  # Create a new document in the collection of 'Property'
  createProperty(
    # 'Property' input values
    data: PropertyInput!
  ): Property!
  # Partially updates an existing document in the collection of 'Property'. It
  # only modifies the values that are specified in the arguments. During
  # execution, it verifies that required fields are not set to 'null'.
  partialUpdateProperty(
    # The 'Property' document's ID
    id: ID!
    # 'Property' input values
    data: PartialUpdatePropertyInput!
  ): Property
  # Delete an existing document in the collection of 'User'
  deleteUser(
    # The 'User' document's ID
    id: ID!
  ): User
  # Delete an existing document in the collection of 'PropertyPoint'
  deletePropertyPoint(
    # The 'PropertyPoint' document's ID
    id: ID!
  ): PropertyPoint
  # Partially updates an existing document in the collection of 'User'. It only
  # modifies the values that are specified in the arguments. During execution, it
  # verifies that required fields are not set to 'null'.
  partialUpdateUser(
    # The 'User' document's ID
    id: ID!
    # 'User' input values
    data: PartialUpdateUserInput!
  ): User
  subtractUserBalance(userId: ID!, value: Float!): Float!
}

# 'Image' input values
input PartialUpdateImageInput {
  previewUrl: String
  url: String
}

# 'Property' input values
input PartialUpdatePropertyInput {
  bounty: String
  remainingExpense: String
  visits: Int
  expense: String
  title: String
  city: String
  state: String
  costValue: Int
  costType: CostType
  owner: PropertyOwnerRelation
  images: [PartialUpdateImageInput!]
  description: String
  featured: Boolean
  slug: String
}

# 'PropertyPoint' input values
input PartialUpdatePropertyPointInput {
  user: PropertyPointUserRelation
  property: PropertyPointPropertyRelation
  userId: ID
  propertyId: ID
  impressions: Int
  profit: String
}

# 'User' input values
input PartialUpdateUserInput {
  phone: String
  balance: String
  email: String
  name: String
  properties: UserPropertiesRelation
  type: UserType
  userId: ID
  propertyPoints: UserPropertyPointsRelation
}

type Property {
  visits: Int!
  city: String!
  expense: String
  state: String!
  remainingExpense: String!
  description: String!
  costType: CostType!
  # The document's ID.
  _id: ID!
  featured: Boolean
  slug: String!
  costValue: Int!
  bounty: String!
  owner: User!
  title: String!
  images: [Image!]
  # The document's timestamp.
  _ts: Long!
}

# 'Property' input values
input PropertyInput {
  bounty: String!
  remainingExpense: String!
  visits: Int!
  expense: String
  title: String!
  city: String!
  state: String!
  costValue: Int!
  costType: CostType!
  owner: PropertyOwnerRelation
  images: [ImageInput!]
  description: String!
  featured: Boolean
  slug: String!
}

# Allow manipulating the relationship between the types 'Property' and 'User' using the field 'Property.owner'.
input PropertyOwnerRelation {
  # Create a document of type 'User' and associate it with the current document.
  create: UserInput
  # Connect a document of type 'User' with the current document using its ID.
  connect: ID
}

# The pagination object for elements of type 'Property'.
type PropertyPage {
  # The elements of type 'Property' in this page.
  data: [Property]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

type PropertyPoint {
  impressions: Int!
  profit: String!
  # The document's ID.
  _id: ID!
  propertyId: ID!
  property: Property!
  userId: ID!
  user: User!
  # The document's timestamp.
  _ts: Long!
}

# 'PropertyPoint' input values
input PropertyPointInput {
  user: PropertyPointUserRelation
  property: PropertyPointPropertyRelation
  userId: ID!
  propertyId: ID!
  impressions: Int!
  profit: String!
}

# The pagination object for elements of type 'PropertyPoint'.
type PropertyPointPage {
  # The elements of type 'PropertyPoint' in this page.
  data: [PropertyPoint]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

# Allow manipulating the relationship between the types 'PropertyPoint' and
# 'Property' using the field 'PropertyPoint.property'.
input PropertyPointPropertyRelation {
  # Create a document of type 'Property' and associate it with the current document.
  create: PropertyInput
  # Connect a document of type 'Property' with the current document using its ID.
  connect: ID
}

# Allow manipulating the relationship between the types 'PropertyPoint' and 'User' using the field 'PropertyPoint.user'.
input PropertyPointUserRelation {
  # Create a document of type 'User' and associate it with the current document.
  create: UserInput
  # Connect a document of type 'User' with the current document using its ID.
  connect: ID
}

type Query {
  findPropertyByFeatured(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    featured: Boolean!
  ): PropertyPage!
  findPropertiesByCostTypeAndState(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    costType: CostType!
    state: String!
  ): PropertyPage!
  # Find a document from the collection of 'Property' by its id.
  findPropertyByID(
    # The 'Property' document's ID
    id: ID!
  ): Property
  findUserByEmail(email: String!): User
  findPropertyBySlug(slug: String!): Property!
  findPropertiesByUserId(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    costType: CostType!
    state: String!
  ): PropertyPage!
  findPropertyPointByPropertyIdAndUserId(
    propertyId: ID!
    userId: ID!
  ): PropertyPoint
  findPropertyPointsByUserId(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    userId: ID!
  ): PropertyPointPage!
  # Find a document from the collection of 'User' by its id.
  findUserByID(
    # The 'User' document's ID
    id: ID!
  ): User
  findUserByUserId(userId: ID!): User
  # Find a document from the collection of 'PropertyPoint' by its id.
  findPropertyPointByID(
    # The 'PropertyPoint' document's ID
    id: ID!
  ): PropertyPoint
  findPropertiesByCostType(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    costType: CostType!
  ): PropertyPage!
}

scalar Time

type User {
  name: String!
  email: String!
  # The document's ID.
  _id: ID!
  balance: String!
  properties(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): PropertyPage!
  userId: ID!
  type: UserType!
  propertyPoints(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): PropertyPointPage!
  phone: String
  # The document's timestamp.
  _ts: Long!
}

# 'User' input values
input UserInput {
  phone: String
  balance: String!
  email: String!
  name: String!
  properties: UserPropertiesRelation
  type: UserType!
  userId: ID!
  propertyPoints: UserPropertyPointsRelation
}

# Allow manipulating the relationship between the types 'User' and 'Property'.
input UserPropertiesRelation {
  # Create one or more documents of type 'Property' and associate them with the current document.
  create: [PropertyInput]
  # Connect one or more documents of type 'Property' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Property' from the current document using their IDs.
  disconnect: [ID]
}

# Allow manipulating the relationship between the types 'User' and 'PropertyPoint'.
input UserPropertyPointsRelation {
  # Create one or more documents of type 'PropertyPoint' and associate them with the current document.
  create: [PropertyPointInput]
  # Connect one or more documents of type 'PropertyPoint' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'PropertyPoint' from the current document using their IDs.
  disconnect: [ID]
}

enum UserType {
  Agency
  Individual
  Unassigned
}

