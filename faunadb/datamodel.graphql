
type User {
phone:String
balance:String!
email: String! @unique
name: String! 
properties: [Property!] @relation
type:UserType!
userId: ID! @unique
propertyPoints: [PropertyPoint!] @relation
}


# type Contact {
#   name: String!
#   number: String!
#   property: Property! @relation
#   email: String
#   notes: String
#   to:User!
# }

type Property {  
  bounty: String! #actually float
  remainingExpense:String! #actually float
  visits: Int!
  expense:String #stores expense property has costed, shown to the agents #actually float
  title: String!
  city: String!
  state: String!
  costValue: Int!
  costType:CostType!
  owner:User!
  images: [Image!] 
  description: String!
  featured: Boolean

  slug:String!  @unique
}

type Image @embedded {
previewUrl:String!
url:String!
# property:Property!
}

enum CostType {
  Rent
  Sale
}


enum UserType {
Agency
Individual
Unassigned
}

type Query {
  # findPropertiesByCostType(costType:CostType!):[Property!]!
  findUserByEmail(email:String!):User
  findUserByUserId(userId:ID!):User
  findPropertyPointByPropertyIdAndUserId(propertyId:ID!,userId:ID!):PropertyPoint
  findPropertyByFeatured(featured:Boolean!):[Property!]
  findPropertyBySlug(slug:String!):Property
  findPropertiesByCostTypeAndState(costType:CostType!,state:String!):[Property!]
  findPropertiesByUserId(costType:CostType!,state:String!):[Property!]
  findPropertyPointsByUserId(userId:ID!):[PropertyPoint!]
}

type Mutation {
  incrementPropertyPoint(propertyPointId:ID!): PropertyPoint! @resolver(name:"increment_property_point")
  incrementPropertyVisit(propertyId:ID!):Property! @resolver(name:"increment_property_visit")
  addUserBalance(userId:ID!,value:Float!):Float! @resolver(name:"add_user_balance") #userId is the database id
  subtractUserBalance(userId:ID!,value:Float!):Float! @resolver(name:"sub_user_balance")

}

type PropertyPoint {
  user:User!
  property: Property!
  userId:ID!
  propertyId:ID!
  impressions: Int!
  profit:String!
}



# Query(
#   Lambda(
#     ["PropertyPointId"],
#     Let(
#       {
#         propertyPoint: Ref(Collection("PropertyPoint"), Var("PropertyPointId")),
#         property: Select(["data", "property"], Get(Var("propertyPoint"))),
#         bounty: Select(["data", "bounty"], Get(Var("property"))),
#         impressions: Select(["data", "impressions"], Get(Var("propertyPoint"))),
#         visits: Select(["data", "visits"], Get(Var("property"))),
#         user: Select(["data", "user"], Get(Var("propertyPoint"))),
#         owner: Select(["data", "owner"], Get(Var("property"))),
#         userBalance: Select(["data", "balance"], Get(Var("user"))),
#         ownerBalance: Select(["data", "balance"], Get(Var("owner"))),
#         remainingExpense: Select(
#           ["data", "remainingExpense"],
#           Get(Var("property"))
#         ),
#         expense: Select(["data", "expense"], Get(Var("property"))),
#         profit: Select(["data", "profit"], Get(Var("propertyPoint")))
#       },
#       If(
#         LT(Var("remainingExpense"), Var("bounty")),
#         Update(Var("property"), { data: { remainingExpense: 0 } }),
#         If(
#           LT(Var("ownerBalance"), Var("bounty")),
#           Abort("INSUFFICIENT_FUNDS"),
#           Do(
#             Update(Var("property"), {
#               data: {
#                 visits: Add(Var("visits"), 1),
#                 remainingExpense: Subtract(
#                   Var("remainingExpense"),
#                   Var("bounty")
#                 ),
#                 expense: Add(Var("expense"), Var("bounty"))
#               }
#             }),
#             Update(Var("user"), {
#               data: { balance: Add(Var("userBalance"), Var("bounty")) }
#             }),
#             Update(Var("owner"), {
#               data: { balance: Subtract(Var("ownerBalance"), Var("bounty")) }
#             }),
#             Update(Var("propertyPoint"), {
#               data: {
#                 impressions: Add(Var("impressions"), 1),
#                 profit: Add(Var("profit"), Var("bounty"))
#               }
#             })
#           )
#         )
#       )
#     )
#   )
# )


# Query(
#   Lambda(
#     ["userId", "value"],
#     Let(
#       {
#         user: Ref(Collection("User"), Var("userId")),
#         balance: Select(["data", "balance"], Get(Var("user")))
#       },
#       Do(
#         Update(Var("user"), {
#           data: { balance: Add(Var("balance"), Var("value")) }
#         }),
#         Select(["data", "balance"], Get(Var("user")))
#       )
#     )
#   )
# )